package nitro_test

import (
	"encoding/base64"
	"testing"
	"time"

	"github.com/0xsequence/tee-verifier/nitro"
	"github.com/stretchr/testify/require"
)

var docString = `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`

func TestParse(t *testing.T) {
	docBytes, err := base64.StdEncoding.DecodeString(docString)
	require.NoError(t, err)

	att, err := nitro.Parse(docBytes)
	require.NoError(t, err)
	require.NotNil(t, att)
}

func TestSignedAttestation_Verify(t *testing.T) {
	docBytes, err := base64.StdEncoding.DecodeString(docString)
	require.NoError(t, err)

	att, err := nitro.Parse(docBytes)
	require.NoError(t, err)

	require.NoError(t, att.Verify())
}

func TestSignedAttestation_Validate(t *testing.T) {
	docBytes, err := base64.StdEncoding.DecodeString(docString)
	require.NoError(t, err)

	att, err := nitro.Parse(docBytes)
	require.NoError(t, err)

	// Fri Apr 04 2025 17:07:16 GMT
	now := time.Unix(1743786436, 0)
	require.NoError(t, att.Validate(nitro.WithTime(now)))
}
